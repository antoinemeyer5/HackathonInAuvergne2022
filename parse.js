const csv = require('csv-parser');
const fs = require('fs');


let databaseJSON = { products: [] };

// import csv file
// parse csv file
// csv tab instead of commas

const barcodes = [3222110009958,3613290000185,3176580111546,3550090074230,3428380003843,3440773920001,3161711001971,3272320012231,3596710489794,3073780817929,3700693901789,3114270400334,3228021170060,3307907100084,3222110030884,3272320012910,3228022190067,3161711000622,3222110028775,3161711002817,3480348883010,3023260022459,3341504005540,3387270110040,3280640653010,3480341003125,3387270141266,30005501,3596710348961,3596710424627,3254560321465,3273220541401,3272770093286,3394230023104,3273220012123,3394230110613,3480341001015,3480341000476,3387270141341,3324440440361,3060921460762,3301170078781,5060011704712,3294589820006,3324440440729,3237054005652,3073781177961,3073781178005,3073780969000,5011069171643,3073781177916,3073780841610,3307905222061,3272770005708,5011069171674,3073781069730,3307905810084,5057624122965,3073781095029,3550090074377,3550090074056,3550090074360,3550090074001];

fs.createReadStream('database/en.openfoodfacts.org.products.cv')
    .pipe(csv({ separator: '\t' }))
    .on('data', (row) => {
        // create a product object
        const product = {
            code: row.code,
            label: row.label,
            countries: row.countries,
            fairness: true
        };
        if (barcodes.includes(parseInt(row.code))) {
            databaseJSON.products.push(row);
        }
    })
    .on('end', () => {
        fs.writeFileSync('db.json', JSON.stringify(databaseJSON));
        // write to json file
        console.log('CSV file successfully processed');
    }
);

